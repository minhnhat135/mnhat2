import asyncio
import json
import logging
import os
import re
import socket
import ssl
import time
from urllib.parse import urlparse

import requests
from telegram import User
from telegram.helpers import escape_markdown

# --- C·∫§U H√åNH & H·∫∞NG S·ªê (SAO CH√âP T·ª™ FILE CH√çNH ƒê·ªÇ HO·∫†T ƒê·ªòNG ƒê·ªòC L·∫¨P) ---
# ƒê√¢y l√† nh·ªØng c·∫•u h√¨nh c·∫ßn thi·∫øt ƒë·ªÉ c√°c l·ªánh /site, /sitem ho·∫°t ƒë·ªông
ADMIN_ID = 5127429005
ADMIN_USERNAME = "@startsuttdow"
USER_FILE = "authorized_users.txt"
BOT_STATUS_FILE = "bot_status.json"
PREFS_FILE = "user_prefs.json"
MESSAGES_VI = {
    "bot_off": "üî¥ **TH√îNG B√ÅO B·∫¢O TR√å** üî¥\n\nBot hi·ªán ƒëang t·∫°m th·ªùi ngo·∫°i tuy·∫øn ƒë·ªÉ b·∫£o tr√¨. C√°c l·ªánh check s·∫Ω kh√¥ng ho·∫°t ƒë·ªông cho ƒë·∫øn khi c√≥ th√¥ng b√°o m·ªõi. C·∫£m ∆°n s·ª± ki√™n nh·∫´n c·ªßa b·∫°n!",
}
MESSAGES_EN = {
    "bot_off": "üî¥ **MAINTENANCE NOTICE** üî¥\n\nBot is temporarily offline for maintenance. Checking commands will be disabled until further notice. Thank you for your patience!",
}

# C·∫•u h√¨nh logging ri√™ng cho module n√†y
logger = logging.getLogger(__name__)

# --- C√ÅC H√ÄM TI·ªÜN √çCH (SAO CH√âP T·ª™ FILE CH√çNH) ---
def load_json_file(filename, default_data={}):
    if not os.path.exists(filename):
        return default_data
    try:
        with open(filename, "r", encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return default_data

def load_users():
    try:
        with open(USER_FILE, "r") as f:
            return {int(line.strip()) for line in f if line.strip().isdigit()}
    except FileNotFoundError:
        return set()

def is_bot_on():
    status = load_json_file(BOT_STATUS_FILE, default_data={'is_on': True})
    return status.get('is_on', True)

def get_user_lang(user_id):
    prefs = load_json_file(PREFS_FILE)
    return prefs.get(str(user_id), 'en') # M·∫∑c ƒë·ªãnh l√† ti·∫øng Anh

# --- C·∫§U H√åNH RI√äNG CHO SITE CHECKER ---
# Danh s√°ch Payment Gateways
GATEWAYS_LIST = [
    "PayPal", "Stripe", "Braintree", "Square", "Cybersource", "lemon-squeezy",
    "Authorize.Net", "2Checkout", "Adyen", "Worldpay", "SagePay",
    "Checkout.com", "Bolt", "Eway", "PayFlow", "Payeezy",
    "Paddle", "Mollie", "Viva Wallet", "Rocketgateway", "Rocketgate",
    "Rocket", "Auth.net", "Authnet", "rocketgate.com", "Recurly",
    "Shopify", "WooCommerce", "BigCommerce", "Magento", "Magento Payments",
    "OpenCart", "PrestaShop", "3DCart", "Ecwid", "Shift4Shop",
    "Shopware", "VirtueMart", "CS-Cart", "X-Cart", "LemonStand",
    "AVS", "Convergepay", "PaySimple", "oceanpayments", "eProcessing",
    "hipay", "cybersourse", "payjunction", "usaepay", "creo",
    "SquareUp", "ebizcharge", "cpay", "Moneris", "cardknox",
    "matt sorra", "Chargify", "Paytrace", "hostedpayments", "securepay",
    "blackbaud", "LawPay", "clover", "cardconnect", "bluepay",
    "fluidpay", "Ebiz", "chasepaymentech", "Auruspay", "sagepayments",
    "paycomet", "geomerchant", "realexpayments", "Razorpay",
    "Apple Pay", "Google Pay", "Samsung Pay", "Venmo", "Cash App",
    "Revolut", "Zelle", "Alipay", "WeChat Pay", "PayPay", "Line Pay",
    "Skrill", "Neteller", "WebMoney", "Payoneer", "Paysafe",
    "Payeer", "GrabPay", "PayMaya", "MoMo", "TrueMoney",
    "Touch n Go", "GoPay", "Dana", "JKOPay", "EasyPaisa",
    "Paytm", "UPI", "PayU", "CCAvenue",
    "Mercado Pago", "PagSeguro", "Yandex.Checkout", "PayFort", "MyFatoorah",
    "Kushki", "DLocal", "RuPay", "BharatPe", "Midtrans", "MOLPay",
    "iPay88", "KakaoPay", "Toss Payments", "NaverPay", "OVO", "GCash",
    "Bizum", "Culqi", "Pagar.me", "Rapyd", "PayKun", "Instamojo",
    "PhonePe", "BharatQR", "Freecharge", "Mobikwik", "Atom", "BillDesk",
    "Citrus Pay", "RazorpayX", "Cashfree", "PayUbiz", "EBS",
    "Klarna", "Affirm", "Afterpay", "Zip", "Sezzle",
    "Splitit", "Perpay", "Quadpay", "Laybuy", "Openpay",
    "Atome", "Cashalo", "Hoolah", "Pine Labs", "ChargeAfter",
    "BitPay", "Coinbase Commerce", "CoinGate", "CoinPayments", "Crypto.com Pay",
    "BTCPay Server", "NOWPayments", "OpenNode", "Utrust", "MoonPay",
    "Binance Pay", "CoinsPaid", "BitGo", "Flexa", "Circle",
    "iDEAL", "Giropay", "Sofort", "Bancontact", "Przelewy24",
    "EPS", "Multibanco", "Trustly", "PPRO", "EcoPayz",
    "ACI Worldwide", "Bank of America Merchant Services",
    "JP Morgan Payment Services", "Wells Fargo Payment Solutions",
    "Deutsche Bank Payments", "Barclaycard", "American Express Payment Gateway",
    "Discover Network", "UnionPay", "JCB Payment Gateway",
    "Plaid", "Stripe Terminal", "Square Terminal", "Adyen Terminal",
    "Toast POS", "Lightspeed Payments", "Poynt", "PAX",
    "SumUp", "iZettle", "Tyro", "Vend", "ShopKeep", "Revel",
    "HiPay", "Dotpay", "PayBox", "PayStack", "Flutterwave",
    "Opayo", "MultiSafepay", "PayXpert", "Bambora", "RedSys",
    "NPCI", "JazzCash", "Blik", "PagBank", "VibePay", "Mode",
    "Primer", "TrueLayer", "GoCardless", "Modulr", "Currencycloud",
    "Volt", "Form3", "Banking Circle", "Mangopay", "Checkout Finland",
    "Vipps", "Swish", "MobilePay"
]
# Patterns ƒë·ªÉ ph√°t hi·ªán CMS/Platform
CMS_PATTERNS = {
    'Shopify': r'cdn\.shopify\.com|shopify\.js',
    'BigCommerce': r'cdn\.bigcommerce\.com|bigcommerce\.com',
    'Wix': r'static\.parastorage\.com|wix\.com',
    'Squarespace': r'static1\.squarespace\.com|squarespace-cdn\.com',
    'WooCommerce': r'wp-content/plugins/woocommerce/',
    'Magento': r'static/version\d+/frontend/|magento/',
    'PrestaShop': r'prestashop\.js|prestashop',
    'OpenCart': r'catalog/view/theme|opencart',
    'WordPress': r'wp-content|wp-includes',
    'Joomla': r'media/jui|joomla\.js|media/system/js|joomla\.javascript',
    'Drupal': r'sites/all/modules|drupal\.js|sites/default/files|drupal\.settings\.js',
}
# Patterns ƒë·ªÉ ki·ªÉm tra b·∫£o m·∫≠t
SECURITY_PATTERNS = {
    'GraphQL': r'graphql|__schema|query\s*{',
}

# --- C√ÅC H√ÄM C·ªêT L√ïI C·ª¶A SITE CHECKER ---
def normalize_url(url: str) -> str | None:
    """Chu·∫©n h√≥a URL, th√™m scheme n·∫øu thi·∫øu."""
    if not re.match(r"^(?:f|ht)tps?://", url, re.IGNORECASE):
        url = "http://" + url
    parsed_url = urlparse(url)
    if not all([parsed_url.scheme, parsed_url.netloc]):
        return None
    return f"{parsed_url.scheme}://{parsed_url.netloc}"

def find_payment_gateways(response_text: str) -> list[str]:
    """T√¨m c√°c payment gateway trong n·ªôi dung response."""
    detected = [gateway for gateway in GATEWAYS_LIST if re.search(r'\b' + re.escape(gateway) + r'\b', response_text, re.IGNORECASE)]
    return list(set(detected)) or ["Unknown"]

def find_captcha_details(response_text: str) -> list[str]:
    """T√¨m chi ti·∫øt v·ªÅ c√°c lo·∫°i CAPTCHA."""
    captcha_details = []
    if "recaptcha" in response_text.lower():
        if "recaptcha v1" in response_text.lower():
            captcha_details.append("reCAPTCHA v1")
        if "recaptcha v2" in response_text.lower():
            captcha_details.append("reCAPTCHA v2")
        if "recaptcha v3" in response_text.lower():
            captcha_details.append("reCAPTCHA v3")
        if "recaptcha enterprise" in response_text.lower():
            captcha_details.append("reCAPTCHA Enterprise")
    if "hcaptcha" in response_text.lower():
        captcha_details.append("hCaptcha")
    if "funcaptcha" in response_text.lower():
        captcha_details.append("FunCAPTCHA")
    if "arkoselabs" in response_text.lower():
        captcha_details.append("Arkose Labs")
    
    return captcha_details or ["No CAPTCHA services detected"]

def find_cloudflare_services(response_text: str) -> list[str]:
    """T√¨m c√°c d·ªãch v·ª• b·∫£o m·∫≠t c·ªßa Cloudflare."""
    services = []
    if "cloudflare turnstile" in response_text.lower():
        services.append("Cloudflare Turnstile")
    if "ddos protection" in response_text.lower():
        services.append("DDoS Protection")
    if "web application firewall" in response_text.lower():
        services.append("Web Application Firewall (WAF)")
    if "rate limiting" in response_text.lower():
        services.append("Rate Limiting")
    if "bot management" in response_text.lower():
        services.append("Bot Management")
    if "ssl/tls encryption" in response_text.lower():
        services.append("SSL/TLS Encryption")
    if "zero trust security" in response_text.lower():
        services.append("Zero Trust Security")
        
    return services or ["No Cloudflare services detected"]

def find_checkout_details(response_text: str) -> list[str]:
    """T√¨m c√°c trang li√™n quan ƒë·∫øn thanh to√°n."""
    details = []
    if "checkout" in response_text.lower():
        details.append("Checkout Page")
    if "cart" in response_text.lower():
        details.append("Cart Page")
    if "payment" in response_text.lower():
        details.append("Payment Page")
    if "billing" in response_text.lower():
        details.append("Billing Page")
    if "shipping" in response_text.lower():
        details.append("Shipping Page")
        
    return details or ["No checkout details detected"]

def detect_cms_platform(content: str) -> list[str]:
    """Ph√°t hi·ªán CMS/Platform t·ª´ n·ªôi dung HTML."""
    detected = [cms for cms, pattern in CMS_PATTERNS.items() if re.search(pattern, content, re.IGNORECASE)]
    return list(set(detected))

def check_graphql(content: str) -> bool:
    """Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa GraphQL."""
    for pattern in SECURITY_PATTERNS.values():
        if re.search(pattern, content, re.IGNORECASE):
            return True
    return False

def check_ssl_details(domain: str) -> dict | None:
    """Ki·ªÉm tra th√¥ng tin ch·ª©ng ch·ªâ SSL."""
    context = ssl.create_default_context()
    try:
        with socket.create_connection((domain, 443), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()
                issuer = dict(x[0] for x in cert.get('issuer', []))
                subject = dict(x[0] for x in cert.get('subject', []))
                return {
                    'issuer': issuer.get('organizationName', 'Unknown'),
                    'subject': subject.get('commonName', 'Unknown'),
                }
    except Exception as e:
        logger.error(f"SSL check failed for {domain}: {e}")
        return None

def perform_website_check(url: str, user: User) -> str:
    """Th·ª±c hi·ªán m·ªôt l·∫ßn ki·ªÉm tra site v√† tr·∫£ v·ªÅ chu·ªói k·∫øt qu·∫£."""
    normalized_url = normalize_url(url)
    if not normalized_url:
        return f"‚ö†Ô∏è URL kh√¥ng h·ª£p l·ªá: `{url}`"

    domain = urlparse(normalized_url).netloc
    start_time = time.time()

    try:
        response = requests.get(normalized_url, timeout=10, headers={'User-Agent': 'Mozilla/5.0'})
        response.raise_for_status()
        content = response.text
    except requests.RequestException as e:
        logger.error(f"Failed to fetch {normalized_url}: {e}")
        return f"‚ö†Ô∏è Kh√¥ng th·ªÉ truy c·∫≠p website: `{url}`\nL·ªói: `{e}`"
    
    time_taken = time.time() - start_time
    
    # Th·ª±c hi·ªán t·∫•t c·∫£ c√°c ki·ªÉm tra
    content_lower = content.lower()
    captcha_detected = 'captcha' in content_lower or 'protected by recaptcha' in content_lower or "i'm not a robot" in content_lower
    cloudflare_detected = 'cloudflare' in content_lower or 'cdnjs.cloudflare.com' in content_lower or 'challenges.cloudflare.com' in content_lower

    payment_gateways = find_payment_gateways(content)
    captcha_details = find_captcha_details(content)
    cloudflare_services = find_cloudflare_services(content)
    checkout_details = find_checkout_details(content)
    cms_platforms = detect_cms_platform(content)
    graphql_detected = check_graphql(content)
    ssl_details = check_ssl_details(domain)
    
    # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
    gateway_text = escape_markdown(', '.join(payment_gateways))
    captcha_text = escape_markdown(', '.join(captcha_details))
    cloudflare_text = escape_markdown(', '.join(cloudflare_services))
    checkout_text = escape_markdown(', '.join(checkout_details))
    cms_text = escape_markdown(', '.join(cms_platforms) or 'None')
    
    ssl_issuer = "L·ªói/Kh√¥ng h·ª£p l·ªá"
    ssl_subject = "L·ªói/Kh√¥ng h·ª£p l·ªá"
    ssl_valid = "‚õî"
    if ssl_details:
        ssl_issuer = escape_markdown(ssl_details['issuer'])
        ssl_subject = escape_markdown(ssl_details['subject'])
        ssl_valid = "‚úÖ"
        
    checked_by = escape_markdown(user.first_name if not user.username else f"@{user.username}")
    
    # X√¢y d·ª±ng tin nh·∫Øn tr·∫£ v·ªÅ
    result_text = (
        f"**üí† WEBSITE CHECK RESULT üí†**\n\n"
        f"üîç **Domain**: `{escape_markdown(domain)}`\n"
        f"üí≥ **Gateways**: `{gateway_text}`\n"
        f"üîí **CAPTCHA**: `{captcha_text}`\n"
        f"‚òÅÔ∏è **Cloudflare**: `{cloudflare_text}`\n"
        f"üõí **Checkout**: `{checkout_text}`\n\n"
        f"üõ°Ô∏è **Security**:\n"
        f"   ‚îú‚îÄ Captcha: {'‚úÖ' if captcha_detected else '‚õî'}\n"
        f"   ‚îú‚îÄ Cloudflare: {'‚úÖ' if cloudflare_detected else '‚õî'}\n"
        f"   ‚îî‚îÄ GraphQL: {'‚úÖ' if graphql_detected else '‚õî'}\n\n"
        f"üîê **SSL Details**:\n"
        f"   ‚îú‚îÄ Issuer: `{ssl_issuer}`\n"
        f"   ‚îú‚îÄ Subject: `{ssl_subject}`\n"
        f"   ‚îî‚îÄ Valid: {ssl_valid}\n\n"
        f"üõçÔ∏è **Platform (CMS)**: `{cms_text}`\n\n"
        f"**‚è±Ô∏è Took**: `{time_taken:.2f}s`\n"
        f"**üë§ Checked by**: {checked_by}"
    )
    return result_text

# --- L·ªÜNH BOT (COMMAND HANDLERS) ---
async def site_command(update, context):
    """X·ª≠ l√Ω l·ªánh /site ƒë·ªÉ check m·ªôt website."""
    user = update.effective_user
    if user.id != ADMIN_ID and user.id not in load_users():
        await update.message.reply_text(f"B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng li√™n h·ªá Admin: {ADMIN_USERNAME}")
        return

    if user.id != ADMIN_ID and not is_bot_on():
        lang = get_user_lang(user.id)
        message = MESSAGES_VI["bot_off"] if lang == 'vi' else MESSAGES_EN["bot_off"]
        await update.message.reply_text(message)
        return

    if not context.args:
        await update.message.reply_text("S·ª≠ d·ª•ng: `/site <website.com>`")
        return

    url_input = context.args[0]
    msg = await update.message.reply_text(f"‚è≥ ƒêang ki·ªÉm tra trang `{url_input}`...")

    try:
        # Ch·∫°y h√†m blocking trong m·ªôt thread ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n bot
        result_message = await asyncio.to_thread(perform_website_check, url_input, user)
        await msg.edit_text(result_message, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"L·ªói trong /site command: {e}", exc_info=True)
        await msg.edit_text(f"‚õîÔ∏è **L·ªói H·ªá Th·ªëng khi check site:**\n`{e}`")

async def sitem_command(update, context):
    """X·ª≠ l√Ω l·ªánh /sitem ƒë·ªÉ check nhi·ªÅu website."""
    user = update.effective_user
    if user.id != ADMIN_ID and user.id not in load_users():
        await update.message.reply_text(f"B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng li√™n h·ªá Admin: {ADMIN_USERNAME}")
        return

    if user.id != ADMIN_ID and not is_bot_on():
        lang = get_user_lang(user.id)
        message = MESSAGES_VI["bot_off"] if lang == 'vi' else MESSAGES_EN["bot_off"]
        await update.message.reply_text(message)
        return

    text_content = update.message.text.split('/sitem', 1)[-1].strip()
    if not text_content:
        await update.message.reply_text("S·ª≠ d·ª•ng: `/sitem` v√† d√°n danh s√°ch website ·ªü d√≤ng d∆∞·ªõi."); return

    # T√¨m t·∫•t c·∫£ c√°c URL trong tin nh·∫Øn
    url_pattern = r'(https?://)?([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})'
    urls_to_check = [match[0] + match[1] for match in re.findall(url_pattern, text_content)]
    
    if not urls_to_check:
        await update.message.reply_text("Kh√¥ng t√¨m th·∫•y URL h·ª£p l·ªá n√†o ƒë·ªÉ check."); return

    max_urls = 10
    if len(urls_to_check) > max_urls:
        await update.message.reply_text(f"‚ö†Ô∏è Qu√° nhi·ªÅu URL. Ch·ªâ x·ª≠ l√Ω {max_urls} URL ƒë·∫ßu ti√™n.")
        urls_to_check = urls_to_check[:max_urls]

    await update.message.reply_text(f"üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra `{len(urls_to_check)}` trang web...")

    for url in urls_to_check:
        try:
            result_message = await asyncio.to_thread(perform_website_check, url, user)
            await update.message.reply_text(result_message, disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"L·ªói khi check URL {url} trong /sitem: {e}", exc_info=True)
            await update.message.reply_text(f"‚õîÔ∏è L·ªói khi check `{url}`: `{e}`")
        await asyncio.sleep(1) # Th√™m ƒë·ªô tr·ªÖ ƒë·ªÉ tr√°nh flood
